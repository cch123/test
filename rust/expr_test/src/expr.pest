/*
pest 不支持左递归
expr = {
    (expr ~ and_op ~ expr)
    | (expr ~ or_op ~ expr)
    | ("(" ~ expr ~ ")")
    | comp_expr
}*/

expr = {
    and_expr
    | or_expr
    | paren_bool
    | comp_expr
}

and_expr = {
    paren_bool ~ "and" ~ expr
    | comp_expr ~ "and" ~ expr
}

or_expr = {
    paren_bool ~ "or" ~ expr
    | comp_expr ~ "or" ~ expr
}

paren_bool = { "(" ~ expr ~  ")" }

comp_expr = { field ~ op ~ value }

field = @{ (ASCII_ALPHA ~ ASCII_ALPHANUMERIC*) }
op = { op_eq | op_neq | op_in | op_gt | op_gte | op_lt | op_lte | op_is }
op_eq = { "=" }
op_neq = { "!="|"<>" }
op_in = { "in"|"not in" }
op_gt = { ">" }
op_gte = { ">=" }
op_lt = { "<" }
op_lte = { "<=" }
op_is = { "is"|"is not" }

value = { string_literal | num_literal }

num_literal = @{
    "-"?
    ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+" | "-")? ~ ASCII_DIGIT+)?
}

string_literal = ${ "\"" ~ string ~ "\"" }
string = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

WHITESPACE = _{ " " | "\n" | "\r" }

/*
消除左递归的一个例子
但是这样 ast 会变得很丑
<expr> ::= <expr> + <term>
         | <expr> - <term>
         | <term>

<term> ::= <term> * <factor>
         | <term> / <factor>
         | <factor>

<factor> ::= ( <expr> )
         | Num


<expr> ::= <term> <expr_tail>
<expr_tail> ::= + <term> <expr_tail>
              | - <term> <expr_tail>
              | <empty>

<term> ::= <factor> <term_tail>
<term_tail> ::= * <factor> <term_tail>
              | / <factor> <term_tail>
              | <empty>

<factor> ::= ( <expr> )
           | Num
*/
